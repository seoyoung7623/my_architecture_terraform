name: Terraform by Environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      stage:
        description: "환경 선택 (예: dev, prod)"
        required: true
        default: "dev"

env:
  AWS_REGION: ap-northeast-2
  STAGE: ${{ github.event.inputs.stage || 'dev' }}

jobs:
  backend_setup:
    name: "🛠️ Backend 리소스 생성 (S3 + DynamoDB)"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform 설치
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_DEV_SEOYOUNG_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_DEV_SEOYOUNG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: S3 + DynamoDB 존재 여부 확인 후 apply
        run: |
          cd backend

          S3_EXISTS=$(aws s3api head-bucket --bucket seoyoung-terraformstate-s3 2>&1 || true)
          DDB_EXISTS=$(aws dynamodb describe-table --table-name seoyoung-terraformstate-dynamo 2>&1 || true)

          if echo "$S3_EXISTS" | grep -q 'Not Found'; then
            echo "🪣 S3 버킷이 없음 → 생성 필요"
            terraform init
            terraform apply -auto-approve -var="stage=${{ env.STAGE }}"
          elif echo "$DDB_EXISTS" | grep -q 'ResourceNotFoundException'; then
            echo "📊 DynamoDB 테이블이 없음 → 생성 필요"
            terraform init
            terraform apply -auto-approve -var="stage=${{ env.STAGE }}"
          else
            echo "✅ S3 & DynamoDB 모두 존재함 → apply 생략"
          fi


  deploy_environment:
    name: "🚀 환경별 인프라 배포"
    runs-on: ubuntu-latest
    needs: backend_setup

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform 설치
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.TF_DEV_SEOYOUNG_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TF_DEV_SEOYOUNG_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 환경별 디렉토리에서 init
        run: |
          cd environments/${{ env.STAGE }}
          terraform init \
            -backend-config="bucket=seoyoung-terraformstate-s3" \
            -backend-config="key=${{ env.STAGE }}/terraform.tfstate" \
            -backend-config="region=ap-northeast-2" \
            -backend-config="dynamodb_table=seoyoung-terraformstate-dynamo"

      - name: Terraform Plan
        run: |
          cd environments/${{ env.STAGE }}
          terraform plan -input=false -var="stage=${{ env.STAGE }}"

      - name: Terraform Apply
        run: |
          cd environments/${{ env.STAGE }}
          terraform apply -auto-approve -input=false -var="stage=${{ env.STAGE }}"
